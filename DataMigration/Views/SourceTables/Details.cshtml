@using System.Text.Json


@model SourceTableWithColumnsViewModel

@{
    ViewData["Title"] = "Details";
    ViewData["Title"] = "Source Table Details";

    Model.RowCtrls.Controls.Add(new HTORowEdit());
    var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            };

}

@section Scripts {

    <script src="~/js/linkcolumns.js" asp-append-version="true"></script>
    <link rel="stylesheet" href="~/css/linkcolumns.css" asp-append-version="true" />

    <script src="~/js/htomodalmgr.js" asp-append-version="true"></script>
    <script src="~/js/htomodalmgrconfig.js" asp-append-version="true"></script>

    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="~/lib/jqueryui/jquery-ui.min.css" asp-append-version="true" />



    <script>

        var htoconfigbuilder = new htoModalConfigBuilder();
        var previewlinkmodalconfig = htoconfigbuilder.getPreviewLinkModalConfig();
        previewlinkmodalconfig.successpost = function (data) {
            processPostedMatch(data);
        }

        var previewlinkmoalmgr = new htoModalMgr(previewlinkmodalconfig);

    </script>
    <style>

        div.sqlstatement {
            border: 1px solid grey;
            max-height: 100px;
            overflow-y: scroll;
            max-width: 100%;
            width: 100%;
        }

        td.columnsources {
            max-width: 50px;
            word-wrap: break-word;
            font-size: .8em;
        }

    </style>


}



<div class="hto-pgtitle">Details</div>

<crud-links record-controls="@Model.RowCtrls" last-action="@ActionHistory.GetLastHistoryItem(ViewContext.HttpContext)" class="crudctrls"></crud-links>

<button id="previewlinkbtn">Preview Link</button>

<div class="hto-rtitle">Source Table:  @Html.DisplayFor(model => model.TableName)</div>



<div class="container-fluid">

    <div class="row">

        <div class="col">
            <div class="hto-details">
                <dl class="row">
                    <dt class="col-sm-2">
                        @Html.DisplayNameFor(model => model.TableSchema)
                    </dt>
                    <dd class="col-sm-10">
                        @Html.DisplayFor(model => model.TableSchema)
                    </dd>
                    <dt class="col-sm-2" data-destinationtable="@Model.DestinationTable">
                        @Html.DisplayNameFor(model => model.DestinationTable)
                    </dt>
                    <dd class="col-sm-10">
                        @Html.DisplayFor(model => model.DestinationTable)
                    </dd>
                    <dt class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Description)
                    </dt>
                    <dd class="col-sm-10">
                        @Html.DisplayFor(model => model.Description)
                    </dd>
                    <dt class="col-sm-2">
                        @Html.DisplayNameFor(model => model.NeedsMigration)
                    </dt>
                    <dd class="col-sm-10">
                        @Html.DisplayFor(model => model.NeedsMigration)
                    </dd>
                </dl>
            </div>

        </div>
        <div class="col">
            <div class="hto-details">
                <dl class="row">
                    <dt class="col-sm-2">
                        @Html.DisplayNameFor(model => model.RowCount)
                    </dt>
                    <dd class="col-sm-10">
                        @Html.DisplayFor(model => model.RowCount)
                    </dd>
                    <dt class="col-sm-2">
                        @Html.DisplayNameFor(model => model.ColCount)
                    </dt>
                    <dd class="col-sm-10">
                        @Html.DisplayFor(model => model.ColCount)
                    </dd>
                </dl>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-sm-6">
            <div class="hto-panel">
                <a data-bs-toggle="collapse" href="#sourcetablesql" aria-expanded="false" aria-controls="sourcetablesql" class="collapsed">SQL Distinct Columns</a>
            </div>
            <div id="sourcetablesql" class="panel-collapse collapse">
                <div spellcheck="false" class="sqlstatement">
                    @Html.Raw(Model.TSQLSelectDistinctColumns)
                </div>
            </div>
        </div>
        <div class="col-sm-6">

        </div>

    </div>

    <div class="row">
        <div class="col-sm-6">
        </div>
        <div class="col-sm-6">
            <input type="text" id="targettablename" value="@Model.DestinationTable" style="max-width: 100%; width: 100%;" />
        </div>
    </div>

    <div class="row">
        <div class="col-sm-6">
            @if (Model?.Columns?.FirstOrDefault() != null)
            {
                <table class="table relatedlist sourcecolumns matchers">
                    <thead>
                        <tr>
                            <th></th>
                            <th>
                                @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().ColumnName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().DataType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().ColumnTargets)
                            </th>
                            @*
                        <th>
                        @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().DestinationTable)
                        </th>
                        <th>
                        @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().DestinationColumn)
                        </th>

                            *@
                            <th>
                                @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().NonNulls)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().DistinctValues)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => Model.Columns.FirstOrDefault().NeedsFollowUp)
                            </th>
                        </tr>
                    </thead>

                    @foreach (var item in Model.Columns.OrderBy(c => c.ColumnName))
                    {
                        var dClass = item.DistinctValues == null || item.DistinctValues < 2 ? " class=lowvalue" : "";

                        <tr data-sourcecolumn='@JsonSerializer.Serialize(item, options)' @dClass>
                            @*

                    <a asp-controller="SourceColumns" asp-action="Details" asp-route-tablename="@item.TableName" asp-route-tableschema="@item.TableSchema" asp-route-columnname="@item.ColumnName">
                    @Html.DisplayFor(c => item.ColumnName)
                    </a>

                    *@

                            <td>
                                <a asp-controller="SourceColumns" asp-action="Edit" asp-all-route-data=@item.RouteValues>
                                    <span class="glyphicons glyphicons-edit"></span>
                                </a>
                            </td>
                            <td>
                                <a asp-controller="SourceColumns" asp-action="Details" asp-all-route-data=@item.RouteValues>
                                    @Html.DisplayFor(c => item.ColumnName)
                                </a>
                            </td>
                            <td>@Html.DisplayFor(c => item.DataType)</td>
                            <td class="columntargets">
                                @Html.DisplayFor(c => item.ColumnTargets, "ColumnTargets")
                            </td>
                            @*
                    <td class="destinationtable">@Html.DisplayFor(c => item.DestinationTable)</td>
                    <td class="destinationcolumn">@Html.DisplayFor(c => item.DestinationColumn)</td>

                            *@
                            <td>@Html.DisplayFor(c => item.NonNulls)</td>
                            <td>@Html.DisplayFor(c => item.DistinctValues)</td>
                            <td>
                                @if (item.NeedsFollowUp == true)
                                {
                                    <i class="fas fa-check-square" style="font-size: 1.5em;"></i>

                                } 

                            </td>

                        </tr>


                    }

                </table>

            }

        </div>

        <div class="col-sm-6">
            <div class="targetColumns">

            </div>
        </div>

    </div>

</div>


