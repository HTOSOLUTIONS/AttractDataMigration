@model TargetTableWithColumnsViewModel

@{
    ViewData["Title"] = "Details";
    var baseColumn = Model?.Columns != null ? Model.Columns.FirstOrDefault() : new TargetColumnViewModel( new TargetDDContext.Models.Column());

    Model.RowCtrls.Controls.Add(new HTORowEdit());


}

<div class="hto-pgtitle">Details</div>

<crud-links record-controls="@Model.RowCtrls" last-action="@ActionHistory.GetLastHistoryItem(ViewContext.HttpContext)" class="crudctrls"></crud-links>

<div class="hto-rtitle">Target Table:  @Html.DisplayFor(model => model.TableName)</div>

<div class="hto-details">
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.UseType)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.UseType)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.UseDomain)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.UseDomain)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.RowCount)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.RowCount)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.NeedsMigration)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.NeedsMigration)
        </dd>
    </dl>
</div>






@if (baseColumn != null && Model != null)
{

    @foreach (var useType in Model.Columns.GroupBy(c => c.UseType).OrderBy(g => g.Key))
    {
        <p>Use type:  @Html.Raw(useType.Key)</p>

        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => baseColumn.ColumnName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => baseColumn.DataType)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => baseColumn.ColumnSources)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => baseColumn.NonNulls)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => baseColumn.DistinctValues)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var column in useType.ToList())
                {
                    <tr>

                        <td>@Html.DisplayFor(c => column.ColumnName)</td>
                        <td>@Html.DisplayFor(c => column.DataType)</td>
                        <td>@Html.DisplayFor(c => column.ColumnSources, "ColumnSources")</td>
                        <td>@Html.DisplayFor(c => column.NonNulls)</td>
                        <td>@Html.DisplayFor(c => column.DistinctValues)</td>

                    </tr>
                }

            </tbody>


        </table>






    }


    
}

