@model TargetTableWithColumnsViewModel

@{
    ViewData["Title"] = "Details";
    var baseColumn = Model?.Columns != null ? Model.Columns.FirstOrDefault() : new TargetColumnViewModel( new TargetDDContext.Models.Column());

    Model.RowCtrls.Controls.Add(new HTORowEdit());


}

@section Scripts {


    <script src="~/js/htomodalmgr.js" asp-append-version="true"></script>
    <script src="~/js/htomodalmgrconfig.js" asp-append-version="true"></script>

    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="~/lib/jqueryui/jquery-ui.min.css" asp-append-version="true" />


    <script>

        var htoconfigbuilder = new htoModalConfigBuilder();
        
        var snapshotmodalconfig = htoconfigbuilder.getForeignKeySnapshotModalConfig();
        var snapshotmodalmgr = new htoModalMgr(snapshotmodalconfig);

        var fullparentpathmodalconfig = htoconfigbuilder.getFullParentPathModalConfig();
        var fullparentpathmodalmgr = new htoModalMgr(fullparentpathmodalconfig);

        var targettablesnapshotmodalconfig = htoconfigbuilder.getTargetTableSnapshotModalConfig();
        var targettablesnapshotmodalmgr = new htoModalMgr(targettablesnapshotmodalconfig);

        var targettablecreatesqlmodalconfig = htoconfigbuilder.getTargetTableCreateSQLModalConfig();
        targettablecreatesqlmodalconfig.successpost = function (data) {
            console.log(data);
        }

        var targettablecreatesqlmodalmgr = new htoModalMgr(targettablecreatesqlmodalconfig);


        $(document).ready(function () {

            configTableLinks();

            $(".hto-details dl dt").addClass("col-sm-3");
            $(".hto-details dl dd").addClass("col-sm-9");
            $(".hto-radio-group").addClass("sm");

            $("#createsqlbtn").on("click", function () { showCreateSQL(); });

            $(".needsMigration").on("click", function () {
                setMigration(this);
            });


        });

        function setMigration(ctrl) {

            var ftn = $("[data-fulltablename]").data("fulltablename");
            var nameparts = ftn.split(".");

            var parms = {

                tableschema: nameparts[0],
                tablename: nameparts[1],
                columnname: $(ctrl).attr("id").split("NeedsMigration_")[1],
                needsmigration: $(ctrl).val()

            };

            $.post("/TargetColumns/EditModal", parms);

        }

        function configTableLinks() {
            $("a.pathpart").on("click", function () {

                var tablewithschema = $(this).html();
                var nameparts = tablewithschema.split(".");
                var schemaname = nameparts[0];
                var tablename = nameparts[1];
                //window.location.href = "/TargetTables/Details?tablename=" + tablename + "&tableschema=" + schemaname;

                var parms = {
                    tableschema: schemaname,
                    tablename: tablename
                };

                targettablesnapshotmodalmgr.loadModalParams(parms);


            });

            $("span.glyphicons.joiner").on("click", function () {

                showJoinDetails(this);

            });

            $("[data-parentpath]").on("click", function () {

                var ftn = $("[data-fulltablename]").data("fulltablename");

                console.log($(this).data("parentpath") + ftn);
                var parms = {
                    fullpath: $(this).data("parentpath") + ftn
                }

                fullparentpathmodalmgr.loadModalParams(parms);

            });


        }


        function showJoinDetails(joiner) {

            var child = $(joiner).next().html();
            var parent = $(joiner).prev().html();
            
            if (child.length > 0 && parent.length > 0) {

                var parms = {

                    parenttable: parent,
                    childtable: child

                };

                snapshotmodalmgr.loadModalParams(parms);


            }


        }

        function showCreateSQL() {

            var ftn = $("[data-fulltablename]").data("fulltablename");
            var nameparts = ftn.split(".");


            var parms = {

                tableschema: nameparts[0],
                tablename: nameparts[1]

            };
            targettablecreatesqlmodalmgr.loadModalParams(parms);

        }


    </script>


}



<div class="hto-pgtitle">Details</div>

<crud-links record-controls="@Model.RowCtrls" last-action="@ActionHistory.GetLastHistoryItem(ViewContext.HttpContext)" class="crudctrls"></crud-links>

<button id="createsqlbtn">Create SQL</button>

<div data-fulltablename="@Model.FullTableName" class="hto-rtitle">Target Table: @Html.DisplayFor(model => model.FullTableName)</div>


<div class="container-fluid">

    <div class="row">
        <div class="col-sm-4">
            <div class="hto-details">
                <dl class="row">
                    <dt>
                        @Html.DisplayNameFor(model => model.UseType)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.UseType)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.UseDomain)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.UseDomain)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.RowCount)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.RowCount)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.Description)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Description)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.NeedsMigration)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.NeedsMigration)
                    </dd>
                </dl>
            </div>

            @Html.DisplayFor(m => Model.TSQLSelectDistinctColumns, "TSQLSelectDistinctColumns")

            @await Html.PartialAsync("ChildPathsView", Model.ChildPathsView)


            @Html.DisplayFor(m => Model.ParentPathsView, "ParentPathsView")

        </div>
        <div class="col-sm-8">

            @Html.DisplayFor(m => Model.Columns, "ColumnsGroupedByUseType")



        </div>
    </div>


</div>





